
$("button#sendBtn").click(function(){

    var form = $("form#downloadForm");
    var urlInput = $("#inputUrl");
    var uaInput = $("#inputUa");
    var filenameInput = $("#inputFilename");
    var button = $(this);

    if (urlInput[0].checkValidity() === false) {
      return;
    }

    button.attr("disabled", true);
    startConsole();

    var sendData = {
      url: urlInput.val(),
      ua: uaInput.val(),
      filename: filenameInput.val()
    }

    $.ajax({
      type: "post",
      url: "./tasks/create/url",
      data: JSON.stringify(sendData),
      contentType: 'application/json',
      dataType: "json",
    }).done(function(data, status, xhr){
      receiveKey(data);
    }).fail(function(xhr, status, error){
      connectError();
    });
});

function receiveKey(json_data){
  if (json_data["result"] == "success"){
    checkStatus(json_data["data"]["id"]);
  }else if (json_data["result"] == "error"){
    stopConsole("ダウンロード情報送信エラー: " + json_data["reason"]);
  }else{
    stopConsole("不明なエラー: マジで予期してません。開発者にお知らせください。 / " + json_data);
  }
}

function connectError(){
  stopConsole("APIサーバへの接続ができませんでした。開発者にお知らせください。(早くデーモン化しなきゃ・・・)");
}

function checkStatus(key){
  var checker = new $.PeriodicalUpdater("./tasks/view/" + key,{
    method: "get",
    minTimeout: 2000,
    multiplier: 1,
    maxCalls: 0
  },
  function(json_data){
    if (json_data["result"] == "success"){
      data = json_data["data"];

      if (data["isStarted"] == "1"){
        addStartedMessage();
      }
      if (data["state"] == "FETCH"){
        if (typeof data["fetchPercent"] === "undefined"){
          addFetchingMessage("0");
        }else{
          addFetchingMessage(data["fetchPercent"]);
        }
      }
      if (data["isFetched"] == "1"){
        addFetchedMessage();
      }
      if (data["isInstalled"] == "1"){
        addInstalledMessage();
      }
      if (data["isSubmitted"] == "1" && data["state"] == "FINISH"){
        addSubmittedMessage();
        submit_id = data["submit_id"];
        submitted_url = data["cuckoo_web_url"] + "submit/post/" + submit_id;
        finishConsole(submitted_url);
        checker.stop();
      }else if (data["state"] == "STOP"){
        if (data["ErrorPoint"] == "fetch"){
          stopConsole("ダウンロードエラー: " + data["ErrorMessage"]);
          checker.stop();
        }else if (data["ErrorPoint"] == "install"){
          stopConsole("ファイル保存エラー: " + data["ErrorMessage"]);
          checker.stop();
        }else if (data["ErrorPoint"] == "submit"){
          stopConsole("サンドボックス送信エラー: " + data["ErrorMessage"]);
          checker.stop();
        }
      }
    }else if (json_data["result"] == "error"){
      stopConsole("不明エラー: " + json_data["reason"]);
    }
  });
}


function startConsole(){
  submitted_url_block = $(".submitted_url");
  submitted_url_block.hide();
  submitted_url_block.html("");
  progress = $(".progress");
  progress.show();


  refreshConsole("ダウンロード情報を送信中...");
  progressBar = $(".progress-bar");
  progressBar.removeClass("progress-bar-danger");
  progressBar.addClass("progress-bar-success");
  progressBar.addClass("progress-bar-striped");
  progressPanel = $(".progressPanel");
  progressPanel.show("fast");
}

function stopConsole(errorMessage){
  addMessage(errorMessage);
  progressBar = $(".progress-bar");
  progressBar.removeClass("progress-bar-striped");
  progressBar.addClass("progress-bar-danger");

  button = $("button#sendBtn");
  button.attr("disabled", false);
}

function refreshConsole(message){
  console = $(".progressMessage");
  console.html(message + "</br>");
}

function addMessage(message){
  console = $(".progressMessage");
  origMessage = console.html();
  message = message.replace(/</g, "＜");
  message = message.replace(/>/g, "＞");
  console.html(origMessage + message + "</br>");
}   

function changeMessage(pattern, changeMessage){
  console = $(".progressMessage");

  changeMessage = changeMessage.replace(/</g, "＜");
  changeMessage = changeMessage.replace(/>/g, "＞");
  origMessage = console.html();

  var regExp = new RegExp(pattern);
  var fixedMessage = origMessage.replace(regExp, changeMessage + "</br>");
  console.html(fixedMessage);
  
}

function isIncludedInMessage(pattern){
  console = $(".progressMessage");
  origMessage = console.html();
  if (origMessage.indexOf(pattern) > 0){
    return true;
  }else{
    return false;
  }
}

function addStartedMessage(){
  message = "ダウンロード情報を送信しました。";
  if (isIncludedInMessage(message)){
    return;
  }else{
    addMessage(message);
    addMessage("ファイルのダウンロード中...");
  }
}

function addFetchingMessage(percent){
  message = "ファイルのダウンロード中...";
  if (isIncludedInMessage(message)){
    pattern = /ファイルのダウンロード中.*<br>/
    changeMessage(pattern, message + "(" + percent + "%)");
  }else{
    addMessage(message + "(" + percent + "%)");
  }
}

function addFetchedMessage(){
  addFetchingMessage("100"); //100%にしないと不安になりそうなので

  message = "ダウンロードが完了しました。";
  if (isIncludedInMessage(message)){
    return;
  }else{
    addMessage(message);
  }
}

function addInstalledMessage(){
  message = "サンドボックスへのファイルの送信準備が整いました。";
  if (isIncludedInMessage(message)){
    return;
  }else{
    addMessage(message);
  }
}

function addSubmittedMessage(){
  message = "サンドボックスへの送信が完了しました。";
  if (isIncludedInMessage(message)){
    return;
  }else{
    addMessage(message);
  }
}

function finishConsole(submitted_url){
  addMessage("下記リンクからサンドボックスの解析状況を確認してください。");
  
  progress = $(".progress");
  progress.hide();

  submitted_url_block = $(".submitted_url");
  submitted_url_block.html('<a href="' + submitted_url + '" target="_blank">' + submitted_url + '</a>');
  submitted_url_block.show("normal");
  
  button = $("button#sendBtn");
  button.attr("disabled", false);
}

