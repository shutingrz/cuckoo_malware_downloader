from flask import render_template, jsonify, request
from urllib.parse import urlparse, unquote
from datetime import datetime
import json, re, os

from maldown import app
from .collection import Collection
from .downloader import Downloader

CUCKOO_WEB_HOST = app.config['CUCKOO_WEB_HOST']
CUCKOO_API_HOST = app.config['CUCKOO_API_HOST']

#Database
collection = Collection(CUCKOO_WEB_HOST)

@app.route('/', methods=['GET'])
def index():
  return render_template('index.html')

@app.route('/tasks/view/<key>', methods=['GET'])
def get(key):
  return get_state(key)

@app.route('/tasks/create/url', methods=['POST'])
def post():
  if request.method == 'POST':
    return post_item(request.json)

def get_state(key):
  item = collection.getItem(key)
  if item is None:
    result = {"result": "error", "reason": "該当する情報が見つかりませんでした。開発者にお知らせください。"}
  else:
    result = {"result": "success", "data": item}
  return jsonify(result)
  
def post_item(request_json):
  try:
    if ('url' in request_json and 'filename' in request_json and 'ua' in request_json) is False:
      result = {"result": "error", "reason": "パラメータが足りません。"}
      return jsonify(result)
  except Exception as exc:
    result = {"result": "error", "reason": "Exception: %s" % str(exc)}
    return jsonify(result)

  url = request_json['url']
  filename = request_json['filename']
  ua = request_json['ua']

  if re.match(r"http://", url) is re.match(r"https://", url) is re.match(r"hxxp://", url) is re.match(r"hxxps://", url) is None:
    result = {"result": "error", "reason": "URLの形式が不正です。"}
  elif re.search(r"[^0-9a-zA-Z\.\-\_]+", filename) is not None:  #変な記号禁止
    result = {"result": "error", "reason": "ファイル名に使えない文字が含まれています。(大文字小文字数字および「._-」のみ可)"}
  elif re.search(r"^\.+$", filename) is not None: #.のみ禁止
    result = {"result": "error", "reason": "ファイル名に使えない文字が含まれています。(.のみはダメです)"}
  else:

    #hxxpやhxxpsの形式だったらhttpやhttpsに直す
    if re.match(r"hxxp://", url) is not None:
      url = re.sub(r"^hxxp://", "http://", url)
    elif re.match(r"hxxps://", url) is not None:
      url = re.sub(r"^hxxps://", "https://", url)

    id = collection.storeItem(url=url, filename=filename, ua=ua) #ファイル名空でもid生成のため作成
    if id is None:
      result = {"result": "error", "reason": "ダウンロード情報の登録に失敗しました。開発者にお知らせください。"}
    else:
      taskInfo = collection.getItem(id)

      if filename == "":
        filename = generateFilename(url, id)
        if filename is None:
          taskInfo["filename"] = "malicious_data.bin"
        else:
          taskInfo["filename"] = filename
        
      try:
        downloader = Downloader(url=url, ua=ua, filename=filename, taskInfo=taskInfo, cuckoo_host=CUCKOO_API_HOST)
        downloader.start()
        result = {"result": "success", "data":{"id":id}}
      except Exception as exc:
        result = {"result": "error", "reason": {"スレッドの生成に失敗しました。開発者にお知らせください。"}}
        
  return jsonify(result)

def generateFilename(url, id):
  try:
    basename = os.path.basename(urlparse(url).path)
    filename = unquote(basename)
    if re.search(r"[^0-9a-zA-Z\.\-\_]+", filename) is not None:  #変な記号禁止
      filename = ""
    elif re.search(r"^\.+$", filename) is not None: #.のみ禁止
      filename = ""

    if filename == "":
      filename = "malicious_" + datetime.now().strftime('%m%d%H%M') + "_" + id + ".bin"
  except Exception as exc:
    filename = None

  return filename
  

